plugins {
    id "java"
    id "maven-publish"
    id "signing"
    alias(libs.plugins.gradle.embulk.plugins)
}
repositories {
    mavenCentral()
}

group = "org.embulk"
version = "0.2.0-SNAPSHOT"
description = "Executes a command and reads a file from its STDOUT."

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

dependencies {
    compileOnly  libs.embulk.spi
    implementation libs.embulk.util.config
    implementation libs.embulk.util.file
    implementation platform(libs.jackson.bom)
    implementation libs.bundles.jackson

    testImplementation libs.junit4
    testImplementation libs.embulk.deps
    testImplementation libs.embulk.junit4
}

embulkPlugin {
    mainClass = "org.embulk.input.CommandFileInputPlugin"
    category = "input"
    type = "command"
}

gem {
    authors = [ "Sadayuki Furuhashi" ]
    email = [ "frsyuki@gmail.com" ]
    // "description" of the gem is copied from "description" of your Gradle project.
    summary = "Command file input plugin for Embulk"
    homepage = "https://github.com/embulk/embulk-input-command"
    licenses = [ "Apache-2.0" ]

    from rootProject.file("LICENSE")
}

gemPush {
    host = "https://rubygems.org"
}


jar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

// A safer and strict alternative to: "dependencies" (and "dependencies --write-locks")
//
// This task fails explicitly when the specified dependency is not available.
// In contrast, "dependencies (--write-locks)" does not fail even when a part the dependencies are unavailable.
//
// https://docs.gradle.org/8.7/userguide/dependency_locking.html#generating_and_updating_dependency_locks
task checkDependencies {
    notCompatibleWithConfigurationCache("The task \"checkDependencies\" filters configurations at execution time.")
    doLast {
        configurations.findAll { it.canBeResolved }.each { it.resolve() }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://www.embulk.org/"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "Sadayuki Furuhashi"
                        email = "frsyuki@gmail.com"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk-input-command.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk-input-command.git"
                    url = "https://github.com/embulk/embulk-input-command"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.maven
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}
